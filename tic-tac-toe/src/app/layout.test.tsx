import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import RootLayout from './layout';

// Mock next/font
jest.mock('next/font/google', () => ({
  Geist: () => ({
    variable: '--font-geist-sans',
  }),
  Geist_Mono: () => ({
    variable: '--font-geist-mono',
  }),
}));

// Mock CSS import
jest.mock('./globals.css', () => ({}));

describe('RootLayout', () => {
  it('renders children correctly', () => {
    render(
      <RootLayout>
        <div>Test Child</div>
      </RootLayout>
    );
    
    expect(screen.getByText('Test Child')).toBeInTheDocument();
  });

  it('sets the correct language attribute', () => {
    render(
      <RootLayout>
        <div>Test Child</div>
      </RootLayout>
    );
    
    const htmlElement = document.documentElement;
    expect(htmlElement).toHaveAttribute('lang', 'en');
  });

  it('renders multiple children correctly', () => {
    render(
      <RootLayout>
        <div>First Child</div>
        <div>Second Child</div>
        <div>Third Child</div>
      </RootLayout>
    );
    
    expect(screen.getByText('First Child')).toBeInTheDocument();
    expect(screen.getByText('Second Child')).toBeInTheDocument();
    expect(screen.getByText('Third Child')).toBeInTheDocument();
  });

  it('handles empty children', () => {
    render(
      <RootLayout>
      </RootLayout>
    );
    
    // Should render without errors even with no children
    expect(document.body).toBeInTheDocument();
  });

  it('handles complex nested children', () => {
    render(
      <RootLayout>
        <div>
          <h1>Header</h1>
          <p>Paragraph</p>
          <ul>
            <li>Item 1</li>
            <li>Item 2</li>
          </ul>
        </div>
      </RootLayout>
    );
    
    expect(screen.getByText('Header')).toBeInTheDocument();
    expect(screen.getByText('Paragraph')).toBeInTheDocument();
    expect(screen.getByText('Item 1')).toBeInTheDocument();
    expect(screen.getByText('Item 2')).toBeInTheDocument();
  });

  it('has correct metadata', () => {
    // We can't directly test metadata, but we can verify the component exports it
    const layoutModule = require('./layout');
    expect(layoutModule.metadata).toBeDefined();
    expect(layoutModule.metadata.title).toBe('Create Next App');
    expect(layoutModule.metadata.description).toBe('Generated by create next app');
  });
});